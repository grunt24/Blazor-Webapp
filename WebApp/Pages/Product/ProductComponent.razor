@page "/product"

@inject NavigationManager navigationManager
@inject IViewProducts viewProducts
@inject IGetCategoryById getCategoryById
@inject IDeleteProduct deleteProduct

<h3>ProductComponent</h3>

<br />

@if(products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Category</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in products)
            {
             <tr>
                    <td>@item.Name</td>
                    <td>@(Math.Round(item.Price.Value, 2))</td>
                    <td>@item.Quantity</td>
                    <td>@getCategoryById.Execute(item.CategoryId.Value)?.Name</td>
                    <td>
                        <button type="button" @onclick="@(() => EditProduct(item))" class="btn btn-warning">Edit</button>
                        <button type="button" @onclick="@(() => DeleteProduct(item.ProductId))" class="btn btn-danger">Delete</button>
                    </td>
             </tr>   
            }
        </tbody>
    </table>
}

<br />
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>

@code {
    private IEnumerable<Product> products;
    protected override void OnInitialized()
    { 
        base.OnInitialized();
        LoadProducts();
    }

    public void OnClickAddProduct()
    {
        navigationManager.NavigateTo("/addproduct");
    }
    public void EditProduct(Product product)
    {
        navigationManager.NavigateTo($"/editproduct/{product.ProductId}");
    }
    public void DeleteProduct(int productId)
    {
        deleteProduct.Delete(productId);
        LoadProducts();

    }

    public void LoadProducts()
    {
        products = viewProducts.Execute();
    }
}
