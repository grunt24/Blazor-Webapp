@page "/editcategory/{categoryId}"

@inject NavigationManager navigationManager
@inject IAddCategory addCategory
@inject IGetCategoryById getCategoryById
@inject IEditCategory editCategory

<h3>Edit Category </h3>

@if (category != null)
{
    <EditForm Model="category" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="category.Description" class="form-control"></InputText>
        </div>
        <div class="form-group pt-4">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public string CategoryId { get; set; }

    private Category category;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override void OnParametersSet()
    { 
        base.OnParametersSet();

        if(int.TryParse(this.CategoryId, out int iCategoryId))
        {
            var cat = getCategoryById.Execute(iCategoryId);
            this.category = new Category { CategoryId = cat.CategoryId, Name = cat.Name, Description = cat.Description };

        }
    }

    private void OnValidSubmit()
    {
        editCategory.Execute(this.category);
        navigationManager.NavigateTo("/category");
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("/category");
    }

}
