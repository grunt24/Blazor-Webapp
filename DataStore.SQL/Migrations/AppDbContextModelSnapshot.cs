// <auto-generated />
using System;
using DataStore.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStore.SQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreEntities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Beverage",
                            Name = "Fruit"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Bakery",
                            Name = "Vegetable"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Meat",
                            Name = "Canned Goods"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Meat",
                            Name = "Dairy"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Meat",
                            Name = "Meat"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Meat",
                            Name = "Seafood"
                        },
                        new
                        {
                            CategoryId = 7,
                            Description = "Meat",
                            Name = "Condiments"
                        },
                        new
                        {
                            CategoryId = 8,
                            Description = "Meat",
                            Name = "Drink"
                        },
                        new
                        {
                            CategoryId = 9,
                            Description = "Meat",
                            Name = "Frozenfood"
                        },
                        new
                        {
                            CategoryId = 10,
                            Description = "Meat",
                            Name = "Personal Care"
                        });
                });

            modelBuilder.Entity("CoreEntities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Name = "Apple",
                            Price = 25.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Name = "Bananas",
                            Price = 120.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Name = "Orange",
                            Price = 39.799999999999997,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Name = "Potatoes",
                            Price = 50.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Name = "Onions",
                            Price = 100.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            Name = "Century Tuna",
                            Price = 32.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            Name = "San Marino",
                            Price = 35.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4,
                            Name = "Butter",
                            Price = 100.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Name = "Egg",
                            Price = 10.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 5,
                            Name = "Pork",
                            Price = 150.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 6,
                            Name = "Shrimp",
                            Price = 500.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 7,
                            Name = "Pepper",
                            Price = 5.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 8,
                            Name = "Vitamilk",
                            Price = 33.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 9,
                            Name = "Hotdog",
                            Price = 85.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 10,
                            Name = "Shampoo",
                            Price = 333.0,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 10,
                            Name = "Dr.Wong Soap",
                            Price = 52.0,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("CoreEntities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("BeforeQty")
                        .HasColumnType("int");

                    b.Property<string>("CashierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CoreEntities.Product", b =>
                {
                    b.HasOne("CoreEntities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoreEntities.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
